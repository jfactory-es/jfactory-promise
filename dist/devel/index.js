/*!
 * JFactoryPromise standalone 1.7.0
 * https://github.com/jfactory-es/jfactory-promise
 *
 * Copyright (c) 2019, StÃ©phane Plazis
 * https://github.com/jfactory-es/jfactory-promise/blob/master/LICENSE.txt
 */
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("lodash"),t=require("jquery");const r="undefined"!=typeof process&&process.versions&&process.versions.node,i=!r||!1,n=["$.about.name","$dev_name","$name","name","id"],a=!r&&{keys:["$dev_traceLog","$dev_traceSource"],libOptions:{offline:Boolean(globalThis.chrome),filter:function(e){return e.lineNumber}}},o={name:"fetch",test:()=>fetch,info:"https://developer.mozilla.org/docs/Web/API/Fetch_API/Using_Fetch"},s={name:"Request",test:()=>Request,info:"https://developer.mozilla.org/docs/Web/API/Request"},c={name:"AbortController/AbortSignal",test:()=>(new AbortController).signal,info:"https://developer.mozilla.org/docs/Web/API/AbortController, https://developer.mozilla.org/docs/Web/API/AbortSignal"};let l={};function u(...e){for(let t of e)l[t.name]=t}u({name:"globalThis",test:()=>globalThis,info:"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/globalThis"});let h=[];function p(e){h.push(e)}const d=t,f=e.isNative,b=e.isString,m=e.isNumber,g=e.isPlainObject,v=e.lowerFirst,$=e.get,y=e.template,_=()=>{};class O{constructor({label:e,stackTraceLimit:t,keys:r,libOptions:i}={}){this.label=e||"The stack has been printed in the console",this.stackTraceLimit=t||1/0,this.keys=r||["stackLog","stackSource"],this.libOptions=i||{}}captureTraceSource(e,t){let r;this.stackTraceLimit&&(r=Error.stackTraceLimit,Error.stackTraceLimit=this.stackTraceLimit),e||(e="captureTraceSource",t=!0);let i={source:new Error,omitAboveFunctionName:e,omitSelf:t};return this.stackTraceLimit&&(Error.stackTraceLimit=r),i}attachTrace(e,t){"object"!=typeof t&&(t=this.captureTraceSource(t||"attachTrace",!t));let r=t.source;this.toPrintableTrace(t).then(e=>r=e);let i=()=>console.log(r)||this.label;Object.defineProperty(e,this.keys[0],{enumerable:!1,configurable:!0,get:()=>i()}),Object.defineProperty(e,this.keys[1],{enumerable:!1,configurable:!0,get:()=>t})}toPrintableTrace(e){return Promise.resolve(e.source)}}class j extends O{constructor(e){super(e)}toPrintableTrace(e){return StackTrace.fromError(e.source,this.libOptions).then(t=>{if(e.omitAboveFunctionName){let r=t.findIndex(t=>t.functionName&&t.functionName.endsWith(e.omitAboveFunctionName));r>0&&(e.omitSelf&&r++,t=t.slice(r))}return t=t.filter(this.libOptions.filter),this.formatTraceFrames(t)})}formatTraceFrames(e){let t,r;return this.libOptions.offline&&window.chrome?(t="Error\n",r="\tat "):(t="",r=""),t+e.map(e=>r+e.toString()).join("\n")}}const w={};p((function(){let e=a;if(e&&!1!==e.use){let t;t="function"==typeof e.use?e.use:"object"==typeof StackTrace?j:O,t===j&&console.warn("jFactory: Stack trace enabled; Performance will be affected"),w.tracer=new t(e)}else w.tracer={captureTraceSource:_,attachTrace:_}}));class E extends Error{constructor(e="unspecified error",t=null){t=Object.assign(Object.create(null),t),super(e=E.toPrintable(e,t)),this.$data=Object.assign(Object.create(null),t)}toString(){return this.message}*[Symbol.iterator](){yield this.message,yield this.$data}static getId(e){return e[(n||E.DEFAULT_KEYS).find(t=>{let r=$(e,t);return r||0===r})]}static toPrintableData(e){const t={};let r;for(let[i,n]of Object.entries(e)){switch(typeof n){case"function":n=n.name+"()";break;case"object":if(null===n){n="null";break}if(n instanceof Error){n=n.toString();break}if(void 0!==(r=E.getId(n)))n='"'+r+'"';else if(f(n.toString))try{r=JSON.stringify(n),n=r.length>E.JSON_MAX?r.substring(0,E.JSON_MAX)+"[...]":r}catch(e){n="[object "+n.constructor.name+"]"}else n=n.toString();break;case"string":n='"'+n+'"';break;default:n=String(n)}t[i]=n}return t}static toPrintable(e,t){const r=[];for(let i of e.split(";")){let e,n=E.RE_PLACEHOLDER;if(n.lastIndex=0,e=n.exec(i)){do{if(e[1]&&e[1]in t){r.push(i.trim());break}}while(null!==(e=n.exec(i)))}else r.push(i.trim())}return v(y(r.join("; "))(E.toPrintableData(t)))}static factory(e,t){let r=class extends E{constructor(e,r){super(t,e),w.tracer.attachTrace(this.$data,r)}};return r.prototype.name="Error JFACTORY_ERR_"+e,r}}E.JSON_MAX=40,E.DEFAULT_KEYS=["name","id"],E.RE_PLACEHOLDER=/\${([^}]+)}/g;const A=E.factory,P=A("INVALID_VALUE","invalid value for ${target}; Reason: ${reason}; Given: ${given}"),S=A("INVALID_CALL","invalid call ${target}; Reason: ${reason}; Owner: ${owner}"),T=A("PROMISE_EXPIRED","expired promise ${target}; Reason: ${reason}");function F(e,t){if(!new.target)return new F(e,t);this.label=e,this.value=t}const k=function(e,t,r){throw new P({target:e,reason:r,given:t})},N={notUndefined:(e,t)=>(void 0===t&&k(e,t,"cannot be undefined"),!0),notEmptyString:(e,t)=>(""===t&&k(e,t,"cannot be empty string"),!0),notFalsy:(e,t)=>(t||k(e,t,'cannot be a falsy value (undefined, null, NaN, 0, "")'),!0),validSpaces:(e,t)=>(t.replace&&t.replace(/\s+/g," ").trim()===t||k(e,t,"invalid space delimiters"),!0),matchReg:(e,t,r)=>(r.test(t)||k(e,t,'string "'+t+'" must match '+r),!0),type(e,t,...r){let i,n=!1;for(let a of r){null===a?i="Null":"name"in a&&(i=a.name);let r=N["type"+i];if(r)try{n=r(e,t)}catch(e){}else n=t instanceof a;if(n)break}return n||k(e,t,"must be an instance of ["+r.map(e=>e.name).join(", ")+"]"),!0},typeNull:(e,t)=>(null!==t&&k(e,t,"must be null"),!0),typeBoolean:(e,t)=>(!0!==t&&!1!==t&&k(e,t,"must be a boolean"),!0),typeString:(e,t)=>(b(t)||k(e,t,"must be a string"),!0),typeNumber:(e,t)=>(m(t)||k(e,t,"must be a number"),!0),typeFunction:(e,t)=>("function"!=typeof t&&k(e,t,"must be a function"),!0),typePlainObject:(e,t)=>(g(t)||k(e,t,"must be a plain object"),!0),equal(e,t,...r){let i=!1;for(let e of r)if(i=t===e)break;return i||k(e,t,"must be one of ["+r+"]"),!0},equalIn:(e,t,r)=>(Array.isArray(r)||(r=Object.values(r)),r.includes(t)||k(e,t,"must be one from ["+r.join(", ")+"]"),!0),properties(e,t,r){for(let i of Object.getOwnPropertyNames(t))F(e+', property name "'+i+'"',i).equalIn(r);return!0},writable:(e,t,r)=>(Object.getOwnPropertyDescriptor(t,r).writable||k(e,t,"must be writable"),!0),notWritable:(e,t,r)=>(Object.getOwnPropertyDescriptor(t,r).writable&&k(e,t,"must not be writable"),!0),enumerable:(e,t,r)=>(Object.prototype.propertyIsEnumerable.call(t,r)||k(e,t,"must be enumerable"),!0),notEnumerable:(e,t,r)=>(Object.prototype.propertyIsEnumerable.call(t,r)&&k(e,t,"must not be enumerable"),!0),configurable:(e,t,r)=>(Object.getOwnPropertyDescriptor(t,r).configurable||k(e,t,"must be configurable"),!0),notConfigurable:(e,t,r)=>(Object.getOwnPropertyDescriptor(t,r).configurable&&k(e,t,"must not be configurable"),!0),reservedProperty:(e,t,r)=>(r in t&&k(e,t,"is a reserved property"),!0)};p((function(){Object.assign(F,N);for(const e of Object.getOwnPropertyNames(N))F.prototype[e]=function(...t){return F[e](this.label,this.value,...t),this}}));const C=()=>++C.uid;C.uid=0;class R extends Promise{constructor({name:e,config:t,traceSource:r},i){1===arguments.length&&([e,t,i]=[null,null,arguments[0]]);const n=C();let a,o;t={...R.DEFAULT_CONFIG,...t},F("name",e=e||"unnamed").type(String,Number).matchReg(/^[^. ]+$/),F("config",t).typePlainObject(),F("executor",i).typeFunction(),super((e,t)=>{a=e,o=t});const s=new I(this,n,e,t);Object.defineProperties(this,{$chain:{enumerable:!0,writable:!0,value:s},$type:{writable:!0,value:"promise"},$value:{writable:!0,value:void 0},$isSettled:{writable:!0,value:!1},$isRejected:{writable:!0,value:null},$isFulfilled:{writable:!0,value:null},$isExpired:{writable:!0,value:!1},$isAborted:{writable:!0,value:!1}}),Object.defineProperties(this,{$dev_name:{configurable:!0,value:e+"["+n+":0]"},$dev_path:{writable:!0,value:new L(this)},$dev_position:{writable:!0,value:0}}),f(i)||Object.defineProperties(this,{$dev_source:{value:i}}),w.tracer.attachTrace(this,r);const c=()=>{if(!this.$chain.isPending)try{this.$chainComplete("auto-completed")}catch(e){console.error(e)}},l=e=>{if(!this.$isSettled){if(e===this)return void u(new TypeError("Chaining cycle detected for promise "+this.$dev_name));let t;if(null!==e&&("object"==typeof e||"function"==typeof x))try{t=e.then}catch(e){return void u(e)}if("function"==typeof t){let r=!1,i=function(e){r||(r=!0,l(e))},n=function(e){r||(r=!0,u(e))};try{t.call(e,i,n)}catch(e){r||u(e)}}else this.$isRejected=!1,this.$isFulfilled=!0,this.$isExpired&&(e=this.$chain.errorExpired),a(e),h(e)}},u=e=>{this.$isSettled||(this.$isRejected=!0,this.$isFulfilled=!1,o(e),h(e))},h=e=>{this.$value=e,this.$isSettled=!0,this.$chain.chainMap.set(this,!0),this.$chain.chainConfig.chainAutoComplete&&(1!==this.$chain.chainMap.size||this.$isExpired?c():this.then(c))};let p=t.chainAutoComplete;Object.defineProperty(t,"chainAutoComplete",{get:()=>p,set:e=>{p!==e&&(p=e,e&&c())}}),s.chainMap.set(this,!1),Object.defineProperties(this,{__resolve__:{value:l},__reject__:{value:u}});try{i(l,u)}catch(e){u(e)}}then(e,t,r){let i,n,a,o=f(e)&&!e.name.startsWith("bound ");e&&"function"==typeof e&&(i=function(r){return"await"===s?a.$isAborted?t(a.$chain.errorExpired):e(r):a.$isExpired?void 0:(a.$isSettled,e(r))}),t&&"function"==typeof t&&(n=function(e){return a.$isSettled,t(e)});let s=r||(o?"await":void 0===e?"catch":"then");a=Object.assign(super.then(i,n),this),C.uid--,a.$type=s;{a.$dev_position=this.$chain.chainMap.size;let r="";e&&e.name&&(r+=e.name),t&&t.name&&(r+=","+t.name),Object.defineProperties(a,{$dev_name:{value:this.$chain.chainName+"["+this.$chain.chainId+":"+this.$dev_position+"]."+a.$type+(r?"("+r+")":"")+"["+a.$chain.chainId+":"+a.$dev_position+"]"},$dev_path:{value:new L(this.$dev_path,a)},$dev_onFulfilled:{value:e},$dev_onRejected:{value:t}})}return a.$chain.chainMap.set(a,!1),this.$isExpired&&R.setExpired(a,!0,!this.$isAborted,this.$chain.errorExpired),a}$catchExpired(e){return this.then(t=>this.$chain.chainRoot.$isExpired?e(t):t,void 0,"$catchExpired")}static resolve(e,t){return 1===arguments.length&&([e,t]=[{},e]),e||(e={}),t instanceof this&&1===arguments.length?t:new this(e,(function(e){e(t)}))}static reject(e,t){return 1===arguments.length&&([e,t]=[{},e]),e||(e={}),new this(e,(function(e,r){r(t)}))}$toPromise(){return Promise.resolve(this)}$chainAbort(e="$chainAbort()"){return this.$chain.complete(e,!0),this}$chainComplete(e="$chainComplete()"){try{this.$chain.complete(e,!1)}catch(e){throw e instanceof S?new S({target:e.$data.target,reason:"Trying to complete a pending chain. Use $chainAbort() if you want to stop it."}):e}return this}$chainAutoComplete(){return this.$chain.chainConfig.chainAutoComplete=!0,this}static setExpired(e,t,r,i){if(!e.$isSettled){if(!t)throw new S({target:e,reason:"promise must be aborted or settled before setting it to expired."});e.$isAborted=!r,e.__resolve__(i)}e.$isExpired=!0}}R.DEFAULT_CONFIG={chainAutoComplete:!1};class I{constructor(e,t,r,i){Object.defineProperties(this,{chainConfig:{value:i},chainRoot:{value:e},chainId:{value:t},chainName:{value:r},chainMap:{value:new Map},isCompleted:{value:!1,configurable:!0},data:{value:{}},__deferred__:{value:d.Deferred()}})}get isPending(){return Array.from(this.chainMap.values()).includes(!1)}then(e){return this.__deferred__.done(e),this}complete(e="chain.complete()",t){let r=this.chainRoot;if(!r.$isExpired){let i=r.$chain.errorExpired=new T({target:r,reason:e}),n=this.chainMap;for(let e of n.keys())R.setExpired(e,t,!1,i);Object.defineProperty(this,"isCompleted",{value:!0}),this.__deferred__.resolve()}return this}}class L extends Array{constructor(){super();for(let e of arguments)Array.isArray(e)?this.push(...e):this.push(e)}get printable(){return this.map((e,t)=>0===t?e.$dev_name:e.$dev_name.split(".")[1]).join(".")}toString(){return this.printable}}u(o,s,c),"undefined"!=typeof jFactoryOverride&&jFactoryOverride||(console.log("jFactory is running in development mode; performances will be affected"),!i&&console.warn("jFactory logs disabled"),function(){if(h){for(let e of h)e();h=null,delete globalThis.jFactoryOverride}}(),function(){for(let[e,t]of Object.entries(l)){let r;try{r=Boolean(t.test())}catch(e){}r||console.warn(`jFactory may require the support of "${e}", ${t.info}`)}l=null}()),exports.JFactoryPromise=R;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
